opam-version: "2.0"
maintainer: "opensource@janestreet.com"
authors: ["Jane Street Group, LLC <opensource@janestreet.com>"]
homepage: "https://github.com/janestreet/splay_tree"
bug-reports: "https://github.com/janestreet/splay_tree/issues"
dev-repo: "git+https://github.com/janestreet/splay_tree.git"
doc: "https://ocaml.janestreet.com/ocaml-core/latest/doc/splay_tree/index.html"
license: "MIT"
build: [
  ["dune" "build" "-p" name "-j" jobs]
]
depends: [
  "ocaml"       {>= "4.08.0"}
  "core_kernel" {>= "v0.15" & < "v0.16"}
  "ppx_jane"    {>= "v0.15" & < "v0.16"}
  "dune"        {>= "2.0.0"}
]
synopsis: "A splay tree implementation"
description: "
Splay trees are binary search trees that move recently accessed nodes
closer to the root for easier access.  They have amortized O(log
n)-time access for a large enough sequence of primitive operations.

A splay trees may outperform other trees such as red-black trees when
recently accessed items are more likely to be accessed in the near
future.

Notably, this splay tree implementation is parameterized by a
reduction operation which lets you specify an extra accumulator value,
which can then be searched by efficiently.
"
url {
src: "https://ocaml.janestreet.com/ocaml-core/v0.15-core-split/files/splay_tree-v0.15.0.tar.gz"
checksum: "sha256=0aee1c352fffc31a09478e9e40c138eb0f64b205508630e7fa4e2c34e2528564"
}
